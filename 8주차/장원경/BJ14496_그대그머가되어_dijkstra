import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BJ14496_그대그머가되어_dijkstra {

	static int start, end;
	static int v, e; // 정점과 간선의 개수
	static int map[][];
	static int res;
	static boolean visit[];
	static int dist[];
	static final int INF = Integer.MAX_VALUE;
	static Queue<int[]> q;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		start = Integer.parseInt(st.nextToken())-1;
		end = Integer.parseInt(st.nextToken())-1;
		st = new StringTokenizer(br.readLine());
		v = Integer.parseInt(st.nextToken());
		e = Integer.parseInt(st.nextToken());
		dist=new int[v];
		map = new int[v][v];
		visit = new boolean[v];
		q=new LinkedList<>();
		for (int i = 0; i < e; i++) {
			st = new StringTokenizer(br.readLine());
			int ss = Integer.parseInt(st.nextToken())-1;
			int ee = Integer.parseInt(st.nextToken())-1;
			map[ss][ee] = 1;
			map[ee][ss] = 1;
		}
		Arrays.fill(dist, INF);
		dist[start]=0;
		visit[start]=true;

		q.add(new int[]{start,0});
	
		dijk();
		
		System.out.println(res);	
	}
	private static void dijk() {
		
		while(!q.isEmpty()) {
			int[] y=q.poll();
			
			if(y[0]==end) {
				res=y[1];
				return;
			}
			//경유할 정점을 찾아 최소비용 찾기
			for(int i=0;i<v;i++) {
				if(!visit[i] && map[y[0]][i]!=0 && dist[i]>y[1]+1) {
					visit[i]=true;
					dist[i]=y[1]+1;
					q.add(new int[] {i,dist[i]});
				}
			}
		}
		res=-1;
	}
}
